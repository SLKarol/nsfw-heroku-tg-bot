import { CallbackQuery, InlineKeyboardButton } from "node-telegram-bot-api";
import delay from "@stanislavkarol/delay";

import { BotCommandHandler, ParsedCommandText } from "../types/telegramBot";
import { IRedditApiRerod, RedditMediaTelegram } from "../types/reddit";

import COMMANDS from "../const/commands";
import type Reddit from "../lib/reddit";
import type ModelNsfw from "../lib/modelNsfw";

import TelegramBot from "../lib/telegramBot";

/**
 * –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è nsfw
 */
class NSFWBot extends TelegramBot {
  db: ModelNsfw;
  reddit: Reddit;
  /**
   * –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è reddit/nsfw
   * @param {string} token
   * @param {Reddit} reddit
   * @param {ModelNsfw} db - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  constructor(token: string, reddit: Reddit, db: ModelNsfw) {
    super({
      token,
      commands: COMMANDS,
      mailingName: "friday",
    });
    this.db = db;
    this.reddit = reddit;
    this.setHandleCommands();
    this.bot.on("callback_query", this.callbackQuery);
  }

  /**
   * –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
   */
  private setHandleCommands() {
    const commands = [
      {
        command: "friday",
        handler: this.fridayCommand,
      },
      {
        command: "subscribe",
        handler: this.subscribeCommand,
      },
      {
        command: "unsubscribe",
        handler: this.unSubscribeCommand,
      },
      {
        command: "quit",
        handler: this.quitCommand,
      },
      {
        command: "help",
        handler: this.helpCommand,
      },
      {
        command: "channels",
        handler: this.listChannelsCommand,
      },
    ] as unknown as BotCommandHandler[];
    this.assignCommands(commands);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   * ! private ??
   * @param {string|number} chatId ID –ß–∞—Ç–∞
   * @param {string} redditChannelName –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
   * @param {number} maxCount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  sendPictures = async (
    chatId: string,
    redditChannelName: string,
    maxCount: number = 20
  ) => {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    await this.bot.sendMessage(
      chatId,
      `–ö–∞–Ω–∞–ª *${redditChannelName}* —Å–æ–æ–±—â–∞–µ—Ç ...`,
      {
        parse_mode: "Markdown",
      }
    );

    this.reddit
      .getNewRecords({ name: redditChannelName, limit: maxCount })
      .then((records) => {
        if (!records.length) {
          return this.bot.sendMessage(chatId, "–ù–∞ –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.");
        }
        const fridayMessages = this.createAlbums(
          records as IRedditApiRerod[],
          this.reddit.mapRedditForTelegram
        );
        return this.sendFridayContent({ chatId, fridayMessages }) as any;
      })
      .then(() => this.bot.sendMessage(chatId, "–ù–∞ —ç—Ç–æ–º —É –º–µ–Ω—è –≤—Å—ë."))
      .catch((err) => {
        console.error(err);
        this.bot.sendMessage(chatId, `–í —Ä–∞–±–æ—Ç–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:\n${err}`, {
          parse_mode: "Markdown",
        });
      });
  };

  /**
   * –†–∞—Å—Å—ã–ª–∫–∞ –ø—è—Ç–Ω–∏—á–Ω—ã—Ö —Ñ–æ—Ç–æ
   * @param {Object} props
   * @param {string|number} props.chatId ID —á–∞—Ç–∞
   * @param {Array} props.fridayMessages –ü—è—Ç–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º–æ–≤
   */
  sendFridayContent = ({
    chatId,
    fridayMessages,
  }: {
    chatId: string;
    fridayMessages: RedditMediaTelegram[][];
  }) => {
    const { bot } = this;
    const promises = [];
    for (const group of fridayMessages) {
      promises.push(
        bot
          .sendMediaGroup(chatId, group as any)
          .then(() => delay(700))
          .then(() => ({ success: true }))
          .catch((err) => {
            return { success: false, message: err };
          })
      );
    }
    return Promise.all(promises);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /subscribe
   * @param {string|number} chatId ID –∫–∞–Ω–∞–ª–∞
   */
  subscribeCommand = (chatId: string) => {
    const { bot } = this;
    bot
      .sendMessage(chatId, "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É...")
      .then(() => this.manageSubscribe?.subscribe(chatId))
      .then(() => bot.sendMessage(chatId, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ."))
      .catch((e) => {
        console.error(e);
        bot.sendMessage(
          chatId,
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:
${e}`
        );
      });
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /unsubscribe
   * @param {string|number} chatId ID –∫–∞–Ω–∞–ª–∞
   */
  unSubscribeCommand = (chatId: string) => {
    const { bot } = this;
    bot
      .sendMessage(chatId, "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏...")
      .then(() => this.manageSubscribe?.unsubscribe(chatId))
      .then(() => bot.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å."))
      .catch((e) => {
        console.error(e);
        bot.sendMessage(
          chatId,
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:
${e}`
        );
      });
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /quit
   * @param {string|number} chatId ID –∫–∞–Ω–∞–ª–∞
   */
  quitCommand = (chatId: string) => {
    const { bot } = this;
    bot
      .sendMessage(chatId, "–Ø —É—Ö–æ–∂—É...")
      .then(() => this.manageSubscribe?.unsubscribe(chatId))
      .then(() => bot.leaveChat(chatId))
      .catch((e) => {
        console.error(e);
        bot.sendMessage(
          chatId,
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:
${e}`
        );
      });
  };

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {Object} props
   * @param {string|number} props.chatId ID —á–∞—Ç–∞
   * @param {Array} props.list –ú–∞—Å—Å–∏–≤ –∞–ª—å–±–æ–º–æ–≤
   */
  async sendFridayContentVideo({
    chatId,
    list,
  }: {
    chatId: string;
    // list: RedditMediaTelegram[][] | RedditMediaTelegram[];
    list: (RedditMediaTelegram | RedditMediaTelegram[])[];
  }) {
    const statusOk = { success: true };
    if (!list.length) {
      return Promise.resolve(statusOk);
    }
    const { bot } = this;
    const promises = [];
    for (const group of list) {
      const isArray = Array.isArray(group);
      promises.push(
        bot
          .sendMediaGroup(chatId, group as any)
          .then(() => delay(700))
          .then(() => statusOk)
          .catch((err) => {
            return { success: false, message: err };
          })
      );
    }
    return Promise.all(promises);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /help
   * @param {string|number} chatId ID –∫–∞–Ω–∞–ª–∞
   */
  helpCommand = (chatId: string) => {
    const { bot } = this;
    let helpText = `–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –∞ –Ω–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n`;
    helpText += COMMANDS.reduce((acc, cmd) => {
      const { command, description } = cmd;
      acc += `*/${command}* ${description}\n`;
      return acc;
    }, "");
    return bot.sendMessage(chatId, helpText, {
      parse_mode: "Markdown",
    });
  };

  /**
   * –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
   * @param {string|number} chatId
   */
  listChannelsCommand = (chatId: string) => {
    const { bot } = this;
    this.db
      .getListChannels()
      .then((channels) => {
        let message = channels.reduce((acc, record) => {
          acc += `${record.name} _(–í–∏–¥–µ–æ: ${
            record.withVideo ? "–î–∞" : "–ù–µ—Ç"
          })_\n`;
          return acc;
        }, "");
        message += `\n–ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ:
1. –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –º–µ–Ω—å—à–µ 21 –≥–æ–¥–∞,
2. –†–∞–±–æ—Ç–∞ —Å —Ç–∞–∫–∏–º –∫–∞–Ω–∞–ª–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`;
        return bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
      })
      .catch((err) => console.error(err));
  };

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
   */
  async getChannelInfo(channelName: string) {
    let requestChannelInfo = { name: "", correct: false };
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    if (channelName) {
      requestChannelInfo.name = channelName;
      requestChannelInfo.correct = await this.db.checkCorrectChannel(
        channelName
      );
    }
    return requestChannelInfo;
  }

  /**
   * –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  fridayCommand = async (chatId: string) => {
    this.bot.sendMessage(chatId, "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤...");
    const channels = await this.db.getListChannels();
    const inlineKeyboard = channels.reduce(
      (acc: InlineKeyboardButton[][], c) => {
        const icon = c.moderationRequired ? "üîû " : "";
        const nameChannel = `${icon} ${c.name}`;
        acc.push([
          { text: `${nameChannel} : üñºÔ∏è`, callback_data: `${c.name}/picture` },
        ]);
        return acc;
      },
      [[{ text: `–°–ª—É—á–∞–π–Ω—ã–π : üñºÔ∏è`, callback_data: "/picture" }]]
    );
    this.bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", {
      reply_markup: {
        resize_keyboard: true,
        inline_keyboard: inlineKeyboard,
      },
    });
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–¥–∞–ª–æ–≥–æ–≤—ã—Ö" –∫–Ω–æ–ø–æ–∫
   */
  callbackQuery = async (callbackQuery: CallbackQuery) => {
    const msg = callbackQuery.message || { chat: { id: "" } };
    // –°–ø—Ä—è—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    // await this.removeHisKeyboard(callbackQuery);
    await this.bot.answerCallbackQuery(callbackQuery.id);
    const { data = "" } = callbackQuery;
    let [channelName, typeFriday] = data.split("/");
    if (!typeFriday) return;
    // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª,  –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π
    if (!channelName) {
      const channel = await this.db.getRandomChannel(true);
      channelName = channel.name;
    }
    if (typeFriday === "picture")
      return this.sendPictures(msg.chat.id.toString(), channelName);
  };

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  removeHisKeyboard = (callbackQuery: CallbackQuery) => {
    const messageText = callbackQuery.message?.text || "";
    const messageId = callbackQuery.message?.message_id || 0;
    return this.bot
      .editMessageText(messageText, {
        message_id: messageId,
        chat_id: callbackQuery.from.id,
        reply_markup: {
          inline_keyboard: [],
        },
      })
      .catch((err) => console.error(err));
  };
}

export default NSFWBot;
